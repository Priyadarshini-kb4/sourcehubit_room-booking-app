# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  dockerRegistryServiceConnection: 'roombookingcr-docker-conn'   # ACR service connection
  imageRepository: 'room-booking-app'                            # Your image repo name
  containerRegistry: 'roombookingcr.azurecr.io'                  # Your ACR login server
  dockerfilePath: 'Dockerfile'                                   # Make sure this matches exactly
  tag: '$(Build.BuildId)'                                        # Unique tag for each build

stages:
# ──────────────────────────────
- stage: BuildAndPush
  displayName: Build and Push Docker Image
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build and push image to ACR
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

# ──────────────────────────────
- stage: Deploy
  displayName: Deploy to Azure Web App
  dependsOn: BuildAndPush
  jobs:
  - deployment: DeployWebApp
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: Deploy container to Web App
            inputs:
              azureSubscription: 'roombooking-azure-conn'     # Azure service connection for Web App
              appName: 'roombookingwebapp'                    # Your actual Web App name
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'

